[1/11] Performing build step for 'bootloader'
[1/1] cd /home/felipe/Desktop/Tareas/IoT/Tarea1/tcp_udp_client/build/bootloader/esp-idf/esptool_py && /home/felipe/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/felipe/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/felipe/Desktop/Tareas/IoT/Tarea1/tcp_udp_client/build/bootloader/bootloader.bin
Bootloader binary size 0x6820 bytes. 0x7e0 bytes (7%) free.
[2/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/protocols.c.obj
[3/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/packeting.c.obj
[4/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/fragments.c.obj
[5/9] Linking C static library esp-idf/main/libmain.a
[6/9] Generating ld/sections.ld
[7/9] Linking CXX executable tcp_client.elf
[8/9] Generating binary image from built executable
esptool.py v4.5.1
Creating esp32 image...
Merged 25 ELF sections
Successfully created esp32 image.
Generated /home/felipe/Desktop/Tareas/IoT/Tarea1/tcp_udp_client/build/tcp_client.bin
[9/9] cd /home/felipe/Desktop/Tareas/IoT/Tarea1/tcp_udp_client/build/esp-idf/esptool_py && /home/felipe/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/felipe/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/felipe/Desktop/Tareas/IoT/Tarea1/tcp_udp_client/build/partition_table/partition-table.bin /home/felipe/Desktop/Tareas/IoT/Tarea1/tcp_udp_client/build/tcp_client.bin
tcp_client.bin binary size 0xbce00 bytes. Smallest app partition is 0x100000 bytes. 0x43200 bytes (26%) free.
